fastlane_version "2.64.1"

default_platform :ios

platform :ios do

  # Synchronize devices, prov profiles, etc..
  desc "Sends the devices list to developer portal"
  desc "Adds all the devices to the dev and adhoc prov profile"
  desc "Downloads all prov profiles"
  desc "Configures the project so it uses this new prov profiles"
  lane :update_devices_and_profiles do
    
    register_devices(
        devices_file: './fastlane/devices.txt',
    )

    match(type: "development",
          force_for_new_devices: true)
    match(type: "adhoc",
          force_for_new_devices: true)
    match(type: "appstore",
          force_for_new_devices: false)

  end

  desc "Installs profiles generated by team owner, no need for dev portal access"
  lane :install_profiles do

    match(type: "development",
          readonly: true)
    match(type: "adhoc",
          readonly: true)
    match(type: "appstore",
          readonly: true)

  end

end

def iq_firebase(appname:, schemename:, targetname:, xcprojname:, bundleid:, firebaseid:, testers_cs:)
  iq_firebase_v2(appname: appname, schemename: schemename, targetname: targetname, configuration: 'Release', xcprojname: xcprojname, bundleid: bundleid, firebaseid: firebaseid, testers_cs: testers_cs)
end

def iq_firebase_v2(appname:, schemename:, targetname:, configuration:, xcprojname:, bundleid:, firebaseid:, testers_cs:)

  clear_derived_data()

  setup_ci()

  match(type: "adhoc",
  	readonly: true)

  timest = Time.new.strftime("%Y%m%d%H%M")
  ENV["ENV_BUILD_NUMBER"] = timest

  increment_build_number(build_number: timest.to_i)

  # Building app for AdHoc distribution, match-styled profiles are  mandatory
  gym(scheme: schemename,
      clean: true,
      export_method: 'ad-hoc',
      configuration: configuration,
      export_options: {
        compileBitcode: false,
        provisioningProfiles: {
          bundleid => "match AdHoc " + bundleid
        }
      }
  )

  # Collecting a changelog from commit list
  changelog = changelog_from_git_commits(
                  tag_match_pattern: "firebase-dist/*",
                  pretty: '• %s',
                  merge_commit_filtering: 'exclude_merges'
                  )
  changelog_empty = changelog.nil? || changelog.empty?
  changelog = 'no changes since last release' if changelog_empty

  firebase_app_distribution(
      app: firebaseid,
      testers: testers_cs,
      release_notes: changelog
  )

  upload_symbols_to_crashlytics(
      dsym_path: "./" + appname + ".app.dSYM.zip"
  )

  commit_version_bump(
      message: "Version Bump",
      xcodeproj: xcprojname + ".xcodeproj"
  )

  version = get_version_number(xcodeproj: xcprojname + ".xcodeproj", target: targetname)
  newTag = "firebase-dist/v" + version + "(" + timest + ")"
  add_git_tag(tag: newTag)
  push_git_tags

  clean_build_artifacts
end

def iq_beta(appname:,  schemename:,  targetname:, configuration:, xcprojname:, bundleid:)

  clear_derived_data()

  setup_ci()

  match(type: "appstore",
          readonly: true)

  timest = Time.new.strftime("%Y%m%d%H%M")
  ENV["ENV_BUILD_NUMBER"] = timest

  increment_build_number(build_number: timest.to_i)

  # Building app for AdHoc distribution, "Release" configuration and match-styled profiles are  mandatory
  gym(scheme: schemename,
      clean: true,
      export_method: 'app-store',
      configuration: configuration,
      export_options: {
        provisioningProfiles: {
          bundleid => "match AppStore " + bundleid
        }
      }
  )

  # Collecting a changelog from commit list
  changelog = changelog_from_git_commits(
                  tag_match_pattern: "appstore/*",
                  pretty: '• %s',
                  merge_commit_filtering: 'exclude_merges'
                  )
  changelog_empty = changelog.nil? || changelog.empty?
  changelog = 'no changes since last release' if changelog_empty


  ## This requires login and 2FA
  #deliver(force: true,
  #        skip_metadata: true,
  #        skip_screenshots: true,
  #        automatic_release: false)
  upload_to_testflight(skip_waiting_for_build_processing: true,
                       changelog: changelog)

  upload_symbols_to_crashlytics(
      dsym_path: "./" + appname + ".app.dSYM.zip"
  )

  commit_version_bump(
      message: "Version Bump",
      xcodeproj: xcprojname + ".xcodeproj"
  )

  version = get_version_number(xcodeproj: xcprojname + ".xcodeproj", target: targetname)
  newTag = "appstore/v" + version + "(" + timest + ")"
  add_git_tag(tag: newTag)
  push_git_tags

  clean_build_artifacts
end
